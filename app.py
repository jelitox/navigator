"""
App.py
This file will be auto-generated by code
"""
from urllib.parse import urlparse

# from querysource.service import QuerySource
from navigator_auth import AuthHandler

from aiohttp import hdrs
from aiohttp.web import middleware
from aiohttp.web_urldispatcher import SystemRoute
# from navigator.views import AbstractView
from navigator.handlers.types import AppHandler
from resources.version import get_versions
from resources.modules import ModulesServices

# from resources.modules import ModulesServices
# from navigator.auth.middlewares import token_middleware
# from navigator.auth.middlewares import troctoken_middleware
# from navigator.auth.middlewares import django_middleware

# async def load_user(token: str, scheme: str, request: web.Request):
#     user = None
#     if token == 'fake-token':
#         user = {'uuid': 'fake-uuid'}
#     return user

# async def load_troc(payload: str, request: web.Request):
#     print(payload)
#     return payload

# we can set which are the protected routes
# troctoken_middleware.protected_routes = ('/hola')
# troctoken_middleware(user_fn=load_troc)


@middleware
async def navigator_client(request, handler):
    host = None
    client = None
    hostname = None
    if isinstance(request.match_info.route, SystemRoute):  # eg. 404
        return await handler(request)
    # avoid authorization backend on excluded methods:
    if request.method == hdrs.METH_OPTIONS:
        return await handler(request)
    ## computar client basado en el referal.
    try:
        host = request.headers.get("Origin")
        if not host:
            host = request.headers.get("Referer")
    except (AttributeError, KeyError):
        pass
    if host:
        url = urlparse(host)
        client = url.hostname.split(".")[0].replace("-", "_")
        print(client)
        hostname = url.hostname
    # getting client info:
    request["client"] = client
    request["hostname"] = hostname
    return await handler(request)

class Main(AppHandler):
    """Main Class.
    Using this class as a boilerplate for starting new programs.
    """
    _middleware: list = [navigator_client]
    enable_static: bool = True
    enable_pgpool: bool = True

    def configure(self):
        super(Main, self).configure()
        # version
        self.app.router.add_get(
            '/api/v1/versions', get_versions,
            allow_head=True
        )
        # MODULES
        self.app.router.add_view("/api/v2/modules", ModulesServices)

        # qry = QuerySource(lazy=False, loop=self.event_loop())
        # qry.setup(app=self.app) # adding QS to the Application (using App Signals)
        # # create a new instance of Auth System
        auth = AuthHandler()
        auth.setup(self.app) # configure this Auth system into App.
        # # MODULES
        # self.app.router.add_view('/api/v2/modules', ModulesServices)
        print(self.app.middlewares)
